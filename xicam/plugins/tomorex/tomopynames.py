# -*- coding: utf-8 -*-

from collections import OrderedDict

OPTIONS = OrderedDict([('downsample', [True, False]),
                       ('upsample', [True, False]),
                       ('norm', ['regular', 'background intensity', 'nearest flats']),
                       ('phase', ['Paganin', 'none']),
                       ('ring', ['Fourier-wavelet', 'Titarenko', 'smoothing filter',
                                 'polar mean filter', 'none']),
                       ('cor', ['Nelder-Mead', 'Vo', 'phase correlation', 'manual']),
                       ('pad', [True, False]),
                       ('recon', ['art', 'bart', 'fbp', 'gridrec', 'mlem', 'osem',
                                  'ospml_hybrid', 'ospml_quad', 'pml_hybrid',
                                  'pml_quad', 'sirt']),
                       ('mask', [True, False]),])

DEFAULT_OPTIONS = OrderedDict([('downsample', False),
                               ('upsample', False),
                               ('norm', 'nearest flats'),
                               ('ring', 'Fourier-wavelet'),
                               ('phase', 'none'),
                               ('cor', 'phase correlation'),
                               ('pad', False),
                               ('recon', 'gridrec'),
                               ('mask', True)])

PARAMS = OrderedDict([('downsample', {'level': [int, 'power of 2']}),
                      ('upsample', {'level': [int, 'power of 2']}),
                      ('regular', {'cutoff': [float, 'pixel value']}),
                      ('background intensity', {'air': [int, 'pixel']}),
                      ('nearest flats', {'cutoff': [float, 'pixel value']}),
                      ('Fourier-wavelet', {'level': [int, 'num wavelet transforms'],
                                           'wname': [['haar', 'db5', 'sym5'], 'wavelet filter'],
                                           'sigma': [float, 'FS damping'],
                                           'pad': [bool, 'padding prior to ring correction']}),
                      ('Titarenko', {'nblock': [int, 'num blocks'],
                                     'alpha': [float, 'damping factor']}),
                      ('smoothing filter', {'size': [int, '']}),
                      ('polar mean filter', {'thresh': [float, 'max offset val'],
                                             'thresh_max': [float, 'max portion'],
                                             'thresh_min': [float, 'min portion'],
                                             'theta_min': [int, 'degrees'],
                                             'rwidth': [int, 'pixels']}),
                      ('Paganin', {'pixel_size': [float, 'cm'], 'dist': [float, 'cm'],
                                   'energy': [float, 'keV'],
                                   'alpha': [float, 'regularization'],
                                   'pad': [bool, 'padding prior to phase retrieval']}),
                      ('Nelder-Mead', {'ind': [int, 'slice'], 'emission': [bool, 'emission type data'],
                                       'init': [float, 'pixels'],
                                       'tol': [float, 'pixels'], 'mask': [bool, 'mask recon to find center'],
                                       'ratio': [float, 'pixels/pixels']}),
                      ('Vo', {'ind': [int, 'slice'], 'smin': [int, 'pixles'],
                              'smax': [int, 'pixels'], 'srad': [float, 'pixels'],
                              'step': [float, 'search step'], 'ratio': [float, 'FOV/object size'],
                              'drop': [int, 'vertical lines']}),
                      ('phase correlation', {'tol': [float, 'pixels']}),
                      ('manual', {'value': [float, 'pixels']}),
                      ('pad', {'axis': [int, 'index of axis'], 'npad': [int, 'pixels'],
                               'mode': [['constant', 'edge'], 'padding type']}),
                      ('art', {'emission': [bool,  'emission type data'],
                               'num_iter': [int, 'iterations']}),
                      ('bart', {'emission': [bool, 'emission type data'],
                                 'num_iter': [int, 'iterations'],
                                 'num_block': [int, 'updating blocks']}),
                      ('fbp', {'emission': [bool,  'emission type data']}),
                      ('gridrec', {'emission': [bool,  'emission type data'],
                                   'filter_name': [['none', 'shepp', 'cosine', 'hann',
                                                    'hamming', 'ramlak', 'parzen', 'butterworth'],
                                                   'filter in reconstruction']}),
                      ('mlem', {'emission': [bool,  'emission type data'],
                                'num_iter': [int, 'iterations']}),
                      ('osem', {'emission': [bool,  'emission type data'],
                                'num_iter': [int, 'iterations'],
                                'num_block': [int, 'updating blocks']}),
                      ('ospml_hybrid', {'emission': [bool, 'emission type data'],
                                        'num_iter': [int, 'iterations'],
                                        'num_block': [int, 'updating blocks']}),
                      ('ospml_quad', {'emission': [bool,  'emission type data'],
                                      'num_iter': [int, 'iterations'],
                                      'num_block': [int, 'updating blocks']}),
                      ('pml_hybrid', {'emission': [bool,  'emission type data'],
                                      'num_iter': [int, 'iterations'],
                                      'reg_par': [float, 'regularization']}),
                      ('pml_quad', {'emission': [bool, 'emission type data'],
                                    'num_iter': [int, 'iterations'],
                                    'reg_par': [float, 'regularization']}),
                      ('sirt', {'emission': [bool, 'emission type data'],
                                'num_iter': [int, 'iterations']}),
                      ('mask', {'ratio': [float, 'pixel/pixel'], 'val': [float, 'mask value']})
                     ])

DEFAULT_PARAMS = {'downsample':{'level': 1},
                  'upsample': {'level': 1},
                  'regular': {'cutoff': None},
                  'background intensity': {'air': 1},
                  'nearest flats': {'cutoff': None},
                  'Paganin': {'pixel_size': 0.0001, 'dist': 50.0,
                              'energy': 20, 'alpha': 0.001, 'pad': True},
                  'Fourier-wavelet': {'level': None,
                                      'wname': 'db5',
                                      'sigma': 2, 'pad': True},
                  'Titarenko': {'nblock': 0, 'alpha': 1.5},
                  'smoothing filter': {'size': 5},
                  'polar mean filter': {'thresh': 300.0, 'thresh_max': 300.0,
                                        'thresh_min': -100.0, 'theta_min': 30,
                                        'rwidth': 30},
                  'Nelder-Mead': {'ind': None, 'emission': False, 'init': None,
                                  'tol': 0.5, 'mask': True, 'ratio': 1.0},
                  'Vo': {'ind': None, 'smin': -40, 'smax': 40, 'srad': 10,
                         'step': 1, 'ratio': 2.0, 'drop': 20},
                  'phase correlation': {'tol': 0.5},
                  'manual': {'value': 0.00},
                  'pad': {'axis': 2, 'npad': None, 'mode': 'edge'},
                  'art': {'algorithm': 'art', 'center': 'cor', 'emission': False, 'num_iter': None},
                  'bart': {'algorithm': 'bart', 'center': 'cor', 'emission': False, 'num_iter': None, 'num_block': None},
                  'fbp': {'algorithm': 'fbp', 'center': 'cor', 'emission': False, 'num_iter': None, 'num_block': None},
                  'gridrec': {'algorithm': 'gridrec', 'center': 'cor', 'emission': False, 'filter_name': 'butterworth'},
                  'mlem': {'algorithm': 'mlem', 'center': 'cor', 'emission': False, 'num_iter': None},
                  'osem': {'algorithm': 'osem', 'center': 'cor', 'emission': False, 'num_iter': None, 'num_block': None},
                  'ospml_hybrid': {'algorithm': 'ospml_hybrid', 'center': 'cor', 'emission': False,
                                   'num_iter': None, 'num_block': None, 'reg_par': None},
                  'ospml_quad': {'algorithm': 'ospml_quad', 'center': 'cor', 'emission': False,
                                 'num_iter': None, 'num_block': None, 'reg_par': None},
                  'pml_hybrid': {'algorithm': 'pml_hybrid', 'center': 'cor', 'emission': False,
                                 'num_iter': None, 'reg_par': None},
                  'pml_quad': {'algorithm': 'pml_quad', 'center': 'cor', 'emission': False,
                               'num_iter': None, 'reg_par': None},
                  'sirt': {'algorithm': 'sirt', 'center': 'cor', 'emission': False,
                           'num_iter': None, 'num_block': None, 'reg_par': None},
                  'mask': {'ratio': 1.0, 'val': 0.0}}

FUNC_NAMES = {'downsample':'downsample',
              'upsample': 'upsample',
              'pad': 'pad',
              'mask': 'circ_mask',
              'regular': 'normalize',
              'background intensity': 'normalize_bg',
              'nearest flats': 'normalize_nf',
              'Paganin': 'retrieve_phase',
              'Fourier-wavelet': 'remove_stripe_fw',
              'Titarenko': 'remove_stripe_ti',
              'smoothing filter': 'remove_stripe_sf',
              'polar mean filter': 'remove_ring',
              'Nelder-Mead': 'find_center',
              'Vo': 'find_center_vo',
              'phase correlation': 'find_center_pc',
              'art': 'recon',
              'bart': 'recon',
              'fbp': 'recon',
              'gridrec': 'recon',
              'mlem': 'recon',
              'osem': 'recon',
              'ospml_hybrid': 'recon',
              'ospml_quad': 'recon',
              'pml_hybrid': 'recon',
              'pml_quad': 'recon',
              'sirt': 'recon',
              }

MULT_CPU_FUNCS = ('normalize', 'normalize_bg', 'normalize_nf', 'retrieve_phase', 'remove_stripe_fw', 'remove_stripe_ti',
                  'remove_stripe_sf', 'remove_ring', 'recon')