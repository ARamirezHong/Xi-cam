"""
This is a setup.py script generated by py2applet

Usage:
    python buildapp.py py2app --optimize 2 --strip

OS X Notes:

1. dyld_find() got an unexpected... -> change loader to loader_path
2. backports.shutil_get_terminal_size? -> uninstall and reinstall it
2. Comment out all ...'.__doc__'... lines in pyfits.hdu.table.py AND pyfits.convenience.py
3. Modify inspect:

    def getsourcelines(object):
        '''Return a list of source lines and starting line number for an object.

        The argument may be a module, class, method, function, traceback, frame,
        or code object.  The source code is returned as a list of the lines
        corresponding to the object and the line number indicates where in the
        original source file the first line of code was found.  An IOError is
        raised if the source code cannot be retrieved.'''
        print object
        try: #ADDED by RP
            lines, lnum = findsource(object)

            if ismodule(object): return lines, 0
            else: return getblock(lines[lnum:]), lnum + 1
        except:
            return ['<unkown>',0]

4. skimage missing docs? -> modify skimage/measure/_regionprops.py
    def _parse_docs():
        import re
        import textwrap

        try:

            doc = regionprops.__doc__
            matches = re.finditer('\*\*(\w+)\*\* \:.*?\n(.*?)(?=\n    [\*\S]+)',
                                  doc, flags=re.DOTALL)
            prop_doc = dict((m.group(1), textwrap.dedent(m.group(2))) for m in matches)

        except TypeError:
            return dict()

        return prop_doc


    def _install_properties_docs():
        prop_doc = _parse_docs()

        for p in [member for member in dir(_RegionProperties)
                  if not member.startswith('_')]:
            try:
                getattr(_RegionProperties, p).__doc__ = prop_doc[p]
            except AttributeError:
                # For Python 2.x
                getattr(_RegionProperties, p).im_func.__doc__ = prop_doc[p]
            except KeyError:
                pass

            setattr(_RegionProperties, p, property(getattr(_RegionProperties, p)))

"""
import sys
sys.setrecursionlimit(1500)
from setuptools import setup
from numpy.distutils.core import Extension
import numpy as np



#os.environ["CC"] = "gcc"
#os.environ["CXX"] = "g++"

APP = ['xicamlauncher/main.py']
DATA_FILES = []
OPTIONS = {'argv_emulation': False,
           'qt_plugins': 'imageformats',
           'resources':['gui','yaml'],
           'iconfile': 'xicam/gui/icon.icns',
           'plist': {
               'CFBundleName': 'Xi-cam',
               'CFBundleShortVersionString': '1.2.7',  # must be in X.X.X format
               'CFBundleVersion': '1.2.7',
               'CFBundleIdentifier': 'com.lbnl.xicam',  # optional
               'NSHumanReadableCopyright': '@ 2016',  # optional
               'CFBundleDevelopmentRegion': 'English',  #optional - English is default
           },
           'includes': [
               'numpy', 'PySide.QtUiTools.QUiLoader', 'PySide.QtCore', 'PySide.QtGui',
               'PySide.QtXml', 'PIL', 'pipeline.cWarpImage', 'pygments.lexers.python',
               'pygments.styles.monokai', 'pygments.styles.default', 'ipython', 'ipykernel.datapub', 'six',
               'distributed', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.commoncrypto'
           ],
           'excludes': [
               'sympy', 'PyQt4', 'PyQt5', 'pyglet'  # , 'matplotlib.tests', 'matplotlib.testing', 'matplotlib',
           ],
           'packages': ['pipeline', 'daemon', 'xicam', 'PIL', 'h5py', 'vispy', 'cryptography', 'pyFAI', 'tomopy',
                        'dxchange', 'skimage']  #import skimage.feature._texture
}

EXT = Extension(name='pipeline.cWarpImage',
                sources=['cext/cWarpImage.cc', 'cext/remesh.cc'],
                extra_compile_args=[ '-O3', '-ffast-math'],#'-fopenmp',, '-I/opt/local/include'
                #extra_link_args=['-fopenmp'],
                include_dirs=[np.get_include()],

)
import cryptography.hazmat.backends


setup(
    app=APP,
    options={'py2app': OPTIONS},
    setup_requires=['py2app'],
    include_dirs=[np.get_include()],
    ext_modules=[EXT]


)
